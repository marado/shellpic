#!/usr/bin/env python
# -*- coding: utf-8; mode: Python -*-
#
#
# Lars JÃ¸rgen Solberg <supersolberg@gmail.com> 2014
#
import argparse
from PIL import Image
import sys
import cStringIO
import time
import cProfile

from shellpic import *

def main():    
    # parse command line parameters
    parser = argparse.ArgumentParser()
    parser.add_argument("image", help="Use '-' to read from STDIN")
    parser.add_argument("--version", action="version", version="Version: " + shellpic.VERSION,
                        help="Print verions number and exit.")

    parser.add_argument("--shell4", action="store_const", const=Shell4Bit, dest='formatter_class',
                        help="Print text suitable for a shell capable of displaying 16 colors")
    parser.add_argument("--shell8", action="store_const", const=Shell8Bit, dest='formatter_class',
                        help="Print text suitable for a shell capable of displaying 8bit colors (default)")
    parser.add_argument("--shell24", action="store_const", const=Shell24Bit, dest='formatter_class', 
                        help="Print text suitable for a shell capable of displaying 24bit colors")
    parser.add_argument("--irc", action="store_const", const=Irc, dest='formatter_class', 
                        help="Print text suitable for piping to an irc client")

    parser.add_argument("--no-scale", action="store_true",
                        help="Do not attempt to scale the image to fit the terminal")
    parser.add_argument("--scale-x", nargs=1, type=int,
                        help="Scale the image to this width")
    parser.add_argument("--scale-y", nargs=1, type=int,
                        help="Scale the image to this height")

    parser.add_argument("--animate", action="store_true", 
                        help="Animate the image once")
    parser.add_argument("--loop", action="store_true", 
                        help="Animate the image and loop indefinetly")
    args = parser.parse_args()    


    # create the right kind of 'Formatter'
    if args.formatter_class:
        formatter = args.formatter_class()
    else:
        formatter = Shell8Bit()

    dimensions = formatter.dimensions()

    # load the image
    if args.image == '-':
        # we need to copy the entire image to a buffer as PIL likes to seek()
        buf = cStringIO.StringIO()
        buf.write(sys.stdin.read())
        buf.seek(0)
        img = Image.open(buf)
        img.load() 
    else:
        try:
            img = Image.open(args.image)
        except IOError as excp:
            sys.stderr.write(str(excp) + '\n')
            exit(1)

    anim = Animation(img)

    # scale it to fit the terminal
    if not args.no_scale:
        if args.scale_x:
            dimensions = [args.scale_x[0], dimensions[1]]
        if args.scale_y:
            dimensions = [dimensions[0], args.scale_y[0]]
        scale(anim, dimensions[0], dimensions[1])

    # convert the animation to rgba, this must be done after any
    # resizing in order to prevent artifacts
    anim.convert('RGBA')

    # FIXME, Animation should take care of this for us
    anim.load()

    # print the image as an animation
    if args.animate or args.loop:
        while True:
            try:
                for frame in anim.frames:
                    start = time.time()
                    print formatter.format(frame).encode('utf-8'),
                    done = time.time()
                    time.sleep(max(0.0 , anim.delay - (done - start)))
                if not args.loop:
                    break
                
            except KeyboardInterrupt:
                print formatter.format(frame).encode('utf-8')
                break
            except NotImplementedError:
                sys.stderr.write('Animation is not implemented for ' + formatter.__class__.__name__ + '\n')
                exit(1)
    
    else:
        # or print the resutl to STDOUT
        print formatter.format(anim.frames[0]).encode('utf-8')


if __name__ == "__main__":
    main()
